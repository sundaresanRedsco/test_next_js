import { createAction, createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { AdminServices } from "../../Services/services";

export const GetVulnerablitiesCount = createAsyncThunk(
  "vulnerability/getVulnerablitiesCount",
  async () => {
    try {
      return await AdminServices(
        "get",
        "api/Risk/get_Vulnerablities",
        null,
        null,
      );
    } catch (err: any) {
      // throw new Error(errorHandling(err));
    }
  },
);

export const GetVulnerablitiesTypes = createAsyncThunk(
  "vulnerabilities/getVulnerablitiesTypes",
  async () => {
    try {
      return await AdminServices(
        "get",
        "api/Risk/getAll_vulnerabilityTypes",
        null,
        null,
      );
    } catch (err: any) {
      // throw new Error(errorHandling(err));
    }
  },
);

export const GetVulnerabilitesTable = createAsyncThunk(
  "vulnerabilitiestable/getVulnerablitiesTable",
  async () => {
    try {
      return await AdminServices(
        "get",
        "api/Risk/Getall_valunerablitycollections",
        null,
        null,
      );
    } catch (err: any) {
      // throw new Error(errorHandling(err));
    }
  },
);

export const resetGatewayStateVulnerability =
  createAction("Gateway/resetState");

type InitialStateType = {
  loading: boolean;
  vulnerabilitiesCount: any[];
  vulnerabilityTypes: any[];
  vulnerabilitiesTableCount: any[];
};

const initialState: InitialStateType = {
  loading: false,
  vulnerabilitiesCount: [],
  vulnerabilityTypes: [],
  vulnerabilitiesTableCount: [],
};

export const vulnerabilitySlice = createSlice({
  name: "vulnerability",
  initialState,
  reducers: {},
  extraReducers(builder) {
    builder.addCase(GetVulnerablitiesCount.pending, (state, action) => {
      state.loading = true;
    });

    builder.addCase(GetVulnerablitiesCount.fulfilled, (state, action) => {
      state.loading = false;
      state.vulnerabilitiesCount = action.payload;
    });

    builder.addCase(GetVulnerablitiesCount.rejected, (state, action) => {
      state.loading = false;
    });

    builder.addCase(GetVulnerablitiesTypes.pending, (state, action) => {
      state.loading = true;
    });

    builder.addCase(GetVulnerablitiesTypes.fulfilled, (state, action) => {
      state.loading = false;
      state.vulnerabilityTypes = action.payload;
    });

    builder.addCase(GetVulnerablitiesTypes.rejected, (state, action) => {
      state.loading = false;
    });

    builder.addCase(GetVulnerabilitesTable.pending, (state, action) => {
      state.loading = true;
    });

    builder.addCase(GetVulnerabilitesTable.fulfilled, (state, action) => {
      state.loading = false;
      state.vulnerabilitiesTableCount = action.payload;
    });

    builder.addCase(GetVulnerabilitesTable.rejected, (state, action) => {
      state.loading = false;
    });

    builder.addCase(resetGatewayStateVulnerability, (state, action) => {
      return initialState; // Reset state to initial values
    });
  },
});

export type vulnerabilityReducer = ReturnType<
  typeof vulnerabilitySlice.reducer
>;

export default vulnerabilitySlice.reducer;
